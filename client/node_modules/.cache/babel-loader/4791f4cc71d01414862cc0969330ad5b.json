{"ast":null,"code":"var _jsxFileName = \"/Users/nicola/Documents/Roiti/client/src/Components/NewPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, ReactDom } from 'react';\nimport { Button, FlexboxGrid, TagGroup, Tag, IconButton, Icon, Input } from 'rsuite';\nimport EditorJs from 'react-editor-js';\nimport CheckList from '@editorjs/checklist';\nimport List from '@editorjs/list';\nimport Delimiter from '@editorjs/delimiter';\nimport InlineCode from '@editorjs/inline-code';\nimport Marker from '@editorjs/marker';\nimport Header from '@editorjs/header';\nimport LinkTool from '@editorjs/link';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewPost() {\n  _s();\n\n  const [data, setData] = useState();\n  const [state, setState] = useState({\n    typing: false,\n    inputValue: '',\n    tags: ['javascript', 'css', 'react']\n  });\n  const [renderInput, setrenderInput] = useState('');\n  const input = useRef();\n  useEffect(() => {\n    console.log(\"Ã  cambiato\");\n    renderInputFun();\n  }, [state]);\n\n  const save = async () => {\n    const res = await data.save();\n    console.log(res);\n  };\n\n  const handleButtonClick = () => {\n    let e = state;\n    e.typing = true;\n    setState(e);\n    renderInputFun().then(() => {\n      console.log(\"dopo input\", input);\n      ReactDOM.findDOMNode(input).focus();\n    });\n  };\n\n  const handleInputChange = inputValue => {\n    let e = state;\n    e.inputValue = inputValue;\n    setState(e);\n    renderInputFun();\n  };\n\n  const handleInputConfirm = () => {\n    const {\n      inputValue,\n      tags\n    } = state;\n    const nextTags = inputValue ? [...tags, inputValue] : tags;\n    let e = state;\n    e.tags = nextTags;\n    e.typing = false;\n    e.inputValue = '';\n    console.log(e);\n    setState(e);\n    renderInputFun();\n  };\n\n  const handleTagRemove = tag => {\n    const {\n      tags\n    } = state;\n    const nextTags = tags.filter(item => item !== tag);\n    setState({\n      tags: nextTags\n    });\n  };\n\n  const renderInputFun = async () => {\n    const {\n      typing,\n      inputValue\n    } = state;\n\n    if (typing) {\n      setrenderInput( /*#__PURE__*/_jsxDEV(Input, {\n        className: \"tag-input\",\n        size: \"xs\",\n        ref: input,\n        style: {\n          width: 70\n        },\n        value: inputValue,\n        onChange: handleInputChange,\n        onBlur: handleInputConfirm,\n        onPressEnter: handleInputConfirm,\n        id: \"inputTag\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this));\n      return;\n    }\n\n    setrenderInput( /*#__PURE__*/_jsxDEV(IconButton, {\n      className: \"tag-add-btn\",\n      onClick: handleButtonClick,\n      icon: /*#__PURE__*/_jsxDEV(Icon, {\n        icon: \"plus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 23\n      }, this),\n      appearance: \"ghost\",\n      size: \"xs\",\n      id: \"btnPlus\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this));\n  };\n\n  const {\n    tags\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"editor\",\n    children: [/*#__PURE__*/_jsxDEV(EditorJs, {\n      data: data,\n      instanceRef: e => setData(e),\n      tools: {\n        Header,\n        CheckList,\n        List,\n        Delimiter,\n        InlineCode,\n        Marker,\n        LinkTool\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TagGroup, {\n      children: [tags.map((item, index) => /*#__PURE__*/_jsxDEV(Tag, {\n        closable: true,\n        onClose: () => {\n          handleTagRemove(item);\n        },\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this)), renderInput]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FlexboxGrid, {\n      justify: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: save,\n        appearance: \"primary\",\n        children: \"Salva\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NewPost, \"JkjXQeJ/XYGMi7ipz5QgWQYV2XA=\");\n\n_c = NewPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"sources":["/Users/nicola/Documents/Roiti/client/src/Components/NewPost.js"],"names":["React","useState","useEffect","useRef","ReactDom","Button","FlexboxGrid","TagGroup","Tag","IconButton","Icon","Input","EditorJs","CheckList","List","Delimiter","InlineCode","Marker","Header","LinkTool","NewPost","data","setData","state","setState","typing","inputValue","tags","renderInput","setrenderInput","input","console","log","renderInputFun","save","res","handleButtonClick","e","then","ReactDOM","findDOMNode","focus","handleInputChange","handleInputConfirm","nextTags","handleTagRemove","tag","filter","item","width","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, ReactDom } from 'react'\n\nimport { Button, FlexboxGrid, TagGroup, Tag, IconButton, Icon, Input } from 'rsuite'\n\n\nimport EditorJs from 'react-editor-js';\nimport CheckList from '@editorjs/checklist';\nimport List from '@editorjs/list'\nimport Delimiter from '@editorjs/delimiter'\nimport InlineCode from '@editorjs/inline-code'\nimport Marker from '@editorjs/marker'\nimport Header from '@editorjs/header'\nimport LinkTool from '@editorjs/link'\n\nexport default function NewPost() {\n    const [data, setData] = useState()\n    const [state, setState] = useState({\n        typing: false,\n        inputValue: '',\n        tags: ['javascript', 'css', 'react']\n    })\n    const [renderInput, setrenderInput] = useState('')\n    const input = useRef()\n\n\n    useEffect(() => {\n        console.log(\"Ã  cambiato\")\n        renderInputFun()\n    }, [state])\n\n\n\n    const save = async () => {\n        const res = await data.save()\n\n        console.log(res)\n    }\n\n    const handleButtonClick = () => {\n        let e = state\n        e.typing = true\n\n        setState(e)\n\n        renderInputFun().then(() => {\n            console.log(\"dopo input\", input)\n\n            ReactDOM.findDOMNode(input).focus()\n        })\n      }\n\n      const handleInputChange = (inputValue) => {\n          let e = state\n\n          e.inputValue = inputValue\n\n        setState(e);\n\n        renderInputFun()\n      }\n\n      const handleInputConfirm = () => {\n        const { inputValue, tags } = state;\n        const nextTags = inputValue ? [...tags, inputValue] : tags;\n\n        let e = state\n\n        e.tags = nextTags\n        e.typing = false\n        e.inputValue = ''\n\n        console.log(e)\n\n        setState(e);\n\n        renderInputFun()\n      }\n\n    const handleTagRemove = (tag) => {\n        const { tags } = state;\n        const nextTags = tags.filter(item => item !== tag);\n        setState({\n            tags: nextTags\n        });\n    }\n\n    const renderInputFun = async () => {\n        const { typing, inputValue } = state;\n\n        if (typing) {\n            setrenderInput (\n                <Input\n                    className=\"tag-input\"\n                    size=\"xs\"\n                    ref={input}\n                    style={{ width: 70 }}\n                    value={inputValue}\n                    onChange={handleInputChange}\n                    onBlur={handleInputConfirm}\n                    onPressEnter={handleInputConfirm}\n                    id=\"inputTag\"\n                />\n            );\n\n            return\n        }\n\n        setrenderInput ( \n            <IconButton\n                className=\"tag-add-btn\"\n                onClick={handleButtonClick}\n                icon={<Icon icon=\"plus\" />}\n                appearance=\"ghost\"\n                size=\"xs\"\n                id=\"btnPlus\"\n            />\n        );\n    }\n\n    const { tags } = state\n\n    return (\n        <div id=\"editor\">\n            <EditorJs data={data} instanceRef={e => setData(e)} tools={{ Header, CheckList, List, Delimiter, InlineCode, Marker, LinkTool }} />\n\n            <TagGroup>\n                {tags.map((item, index) => (\n                    <Tag\n                        key={index}\n                        closable\n                        onClose={() => {\n                            handleTagRemove(item);\n                        }}\n                    >\n                        {item}\n                    </Tag>\n                ))}\n                {renderInput}\n            </TagGroup>\n\n            <FlexboxGrid justify=\"center\">\n                <Button onClick={save} appearance=\"primary\">Salva</Button>\n            </FlexboxGrid>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}