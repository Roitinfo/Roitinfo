{"ast":null,"code":"var _jsxFileName = \"/Users/nicola/Documents/Roiti/client/src/Components/NewPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, FlexboxGrid, TagGroup, Tag } from 'rsuite';\nimport EditorJs from 'react-editor-js';\nimport CheckList from '@editorjs/checklist';\nimport List from '@editorjs/list';\nimport Delimiter from '@editorjs/delimiter';\nimport InlineCode from '@editorjs/inline-code';\nimport Marker from '@editorjs/marker';\nimport Header from '@editorjs/header';\nimport LinkTool from '@editorjs/link';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewPost() {\n  _s();\n\n  const [data, setData] = useState();\n  const [state, setState] = useState({\n    typing: false,\n    inputValue: '',\n    tags: ['javascript', 'css', 'react']\n  });\n\n  const save = async () => {\n    const res = await data.save();\n    console.log(res);\n  };\n\n  const handleButtonClick = () => {\n    setState({\n      typing: true\n    }, () => {\n      this.input.focus();\n    });\n  };\n\n  const handleTagRemove = tag => {\n    const {\n      tags\n    } = state;\n    const nextTags = tags.filter(item => item !== tag);\n    setState({\n      tags: nextTags\n    });\n  };\n\n  const renderInput = () => {\n    const {\n      typing,\n      inputValue\n    } = state;\n\n    if (typing) {\n      return /*#__PURE__*/_jsxDEV(Input, {\n        className: \"tag-input\",\n        inputRef: ref => {\n          input = ref;\n        },\n        size: \"xs\",\n        style: {\n          width: 70\n        },\n        value: inputValue,\n        onChange: handleInputChange,\n        onBlur: handleInputConfirm,\n        onPressEnter: handleInputConfirm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(IconButton, {\n      className: \"tag-add-btn\",\n      onClick: this.handleButtonClick,\n      icon: /*#__PURE__*/_jsxDEV(Icon, {\n        icon: \"plus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 23\n      }, this),\n      appearance: \"ghost\",\n      size: \"xs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  };\n\n  const {\n    tags\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"editor\",\n    children: [/*#__PURE__*/_jsxDEV(EditorJs, {\n      data: data,\n      instanceRef: e => setData(e),\n      tools: {\n        Header,\n        CheckList,\n        List,\n        Delimiter,\n        InlineCode,\n        Marker,\n        LinkTool\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TagGroup, {\n      children: tags.map((item, index) => /*#__PURE__*/_jsxDEV(Tag, {\n        closable: true,\n        onClose: () => {\n          handleTagRemove(item);\n        },\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FlexboxGrid, {\n      justify: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: save,\n        appearance: \"primary\",\n        children: \"Salva\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NewPost, \"Izpttgx/9y6H6UaYvn2QCPCGC0U=\");\n\n_c = NewPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"sources":["/Users/nicola/Documents/Roiti/client/src/Components/NewPost.js"],"names":["React","useState","Button","FlexboxGrid","TagGroup","Tag","EditorJs","CheckList","List","Delimiter","InlineCode","Marker","Header","LinkTool","NewPost","data","setData","state","setState","typing","inputValue","tags","save","res","console","log","handleButtonClick","input","focus","handleTagRemove","tag","nextTags","filter","item","renderInput","ref","width","handleInputChange","handleInputConfirm","e","map","index"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport { Button, FlexboxGrid, TagGroup, Tag } from 'rsuite'\n\n\nimport EditorJs from 'react-editor-js';\nimport CheckList from '@editorjs/checklist';\nimport List from '@editorjs/list'\nimport Delimiter from '@editorjs/delimiter'\nimport InlineCode from '@editorjs/inline-code'\nimport Marker from '@editorjs/marker'\nimport Header from '@editorjs/header'\nimport LinkTool from '@editorjs/link'\n\nexport default function NewPost() {\n    const [data, setData] = useState()\n    const [state, setState] = useState({\n        typing: false,\n        inputValue: '',\n        tags: ['javascript', 'css', 'react']\n    })\n\n    const save = async () => {\n        const res = await data.save()\n\n        console.log(res)\n    }\n\n    const handleButtonClick = () => {\n        setState(\n          {\n            typing: true\n          },\n          () => {\n            this.input.focus();\n          }\n        );\n      }\n\n    const handleTagRemove = (tag) => {\n        const { tags } = state;\n        const nextTags = tags.filter(item => item !== tag);\n        setState({\n            tags: nextTags\n        });\n    }\n\n    const renderInput = () => {\n        const { typing, inputValue } = state;\n\n        if (typing) {\n            return (\n                <Input\n                    className=\"tag-input\"\n                    inputRef={ref => {\n                        input = ref;\n                    }}\n                    size=\"xs\"\n                    style={{ width: 70 }}\n                    value={inputValue}\n                    onChange={handleInputChange}\n                    onBlur={handleInputConfirm}\n                    onPressEnter={handleInputConfirm}\n                />\n            );\n        }\n\n        return (\n            <IconButton\n                className=\"tag-add-btn\"\n                onClick={this.handleButtonClick}\n                icon={<Icon icon=\"plus\" />}\n                appearance=\"ghost\"\n                size=\"xs\"\n            />\n        );\n    }\n\n    const { tags } = state\n\n    return (\n        <div id=\"editor\">\n            <EditorJs data={data} instanceRef={e => setData(e)} tools={{ Header, CheckList, List, Delimiter, InlineCode, Marker, LinkTool }} />\n\n            <TagGroup>\n                {tags.map((item, index) => (\n                    <Tag\n                        key={index}\n                        closable\n                        onClose={() => {\n                            handleTagRemove(item);\n                        }}\n                    >\n                        {item}\n                    </Tag>\n                ))}\n            </TagGroup>\n\n            <FlexboxGrid justify=\"center\">\n                <Button onClick={save} appearance=\"primary\">Salva</Button>\n            </FlexboxGrid>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}